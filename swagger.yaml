openapi: 3.0.3
info:
  title: GreenTrip API
  description: |
    A comprehensive API for GreenTrip application with JWT authentication and user management.

    ## Authentication
    This API uses JWT (JSON Web Token) for authentication. To access protected endpoints:
    1. Register a new user or login to get a JWT token
    2. Include the token in the Authorization header: `Authorization: Bearer <token>`
    3. The token will expire after 60 minutes and can be refreshed

    ## Rate Limiting
    API requests are rate limited to ensure fair usage.

    ## Error Responses
    All error responses follow a consistent format with status code, message, and optional details.
  version: 1.0.0
  contact:
    name: GreenTrip API Support
    email: support@greentrip.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api
    description: Development server
  - url: https://api.greentrip.com/api
    description: Production server

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Email Verification
    description: Email verification and account activation endpoints
  - name: Users
    description: User profile and management endpoints
  - name: Flights
    description: Flight booking and search endpoints
  - name: Emissions
    description: Flight emissions calculation endpoints
  - name: Bookings
    description: Booking management endpoints

paths:
  /:
    get:
      tags:
        - General
      summary: API Information
      description: Get basic information about the API
      responses:
        200:
          description: API information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "GreenTrip API"
                  version:
                    type: string
                    example: "1.0.0"

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account and receive a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - password_confirmation
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 255
                  description: User's full name
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  maxLength: 255
                  description: User's email address (must be unique)
                  example: "john.doe@example.com"
                password:
                  type: string
                  minLength: 8
                  description: User's password (minimum 8 characters)
                  example: "password123"
                password_confirmation:
                  type: string
                  minLength: 8
                  description: Password confirmation (must match password)
                  example: "password123"
            examples:
              valid_registration:
                summary: Valid registration data
                value:
                  name: "John Doe"
                  email: "john.doe@example.com"
                  password: "password123"
                  password_confirmation: "password123"
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Registration successful. Please check your email to verify your account."
                  user:
                    $ref: '#/components/schemas/User'
        422:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user with email and password to receive a JWT token. Email must be verified before login.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "john.doe@example.com"
                password:
                  type: string
                  minLength: 8
                  description: User's password
                  example: "password123"
            examples:
              valid_login:
                summary: Valid login credentials
                value:
                  email: "john.doe@example.com"
                  password: "password123"
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  authorization:
                    $ref: '#/components/schemas/Authorization'
        422:
          description: Validation error or invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Retrieve information about the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        200:
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  user:
                    $ref: '#/components/schemas/User'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidate the current JWT token
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Successfully logged out"
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh token
      description: Get a new JWT token using the current valid token
      security:
        - bearerAuth: []
      responses:
        200:
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  authorization:
                    $ref: '#/components/schemas/Authorization'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

  /verify-email/{token}:
    get:
      tags:
        - Email Verification
      summary: Verify email address
      description: Verify user's email address using the token sent via email
      parameters:
        - name: token
          in: path
          required: true
          description: Email verification token
          schema:
            type: string
            example: "abc123def456ghi789"
      responses:
        200:
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email verified successfully. You can now log in."
                  user:
                    $ref: '#/components/schemas/User'
        400:
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or expired verification token."

  /resend-verification:
    post:
      tags:
        - Email Verification
      summary: Resend verification email
      description: Resend email verification link to user's email address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "john.doe@example.com"
            examples:
              resend_verification:
                summary: Resend verification email
                value:
                  email: "john.doe@example.com"
      responses:
        200:
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification email sent successfully."
        422:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /users/profile:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Retrieve the current user's profile information
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  user:
                    $ref: '#/components/schemas/User'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve information about a specific user (only accessible by the user themselves)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  user:
                    $ref: '#/components/schemas/User'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        403:
          description: Forbidden - User can only access their own data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    put:
      tags:
        - Users
      summary: Update user
      description: Update user information (only accessible by the user themselves)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 255
                  description: User's full name
                  example: "John Doe Updated"
                email:
                  type: string
                  format: email
                  maxLength: 255
                  description: User's email address (must be unique)
                  example: "john.updated@example.com"
            examples:
              update_name:
                summary: Update user name
                value:
                  name: "John Doe Updated"
              update_email:
                summary: Update user email
                value:
                  email: "john.updated@example.com"
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "User updated successfully"
                  user:
                    $ref: '#/components/schemas/User'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        403:
          description: Forbidden - User can only update their own data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        422:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user account (only accessible by the user themselves)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "User deleted successfully"
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        403:
          description: Forbidden - User can only delete their own account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /flights/search:
    post:
      tags:
        - Flights
      summary: Search for available flights
      description: Search for flights based on origin, destination, date, and number of passengers.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - from
                - to
                - date
              properties:
                from:
                  type: string
                  description: Origin airport code (IATA)
                  example: JFK
                to:
                  type: string
                  description: Destination airport code (IATA)
                  example: LAX
                date:
                  type: string
                  format: date
                  description: Departure date (YYYY-MM-DD)
                  example: 2025-12-25
                passengers:
                  type: integer
                  description: Number of passengers
                  example: 2
            examples:
              valid_search:
                summary: Valid search
                value:
                  from: JFK
                  to: LAX
                  date: 2025-12-25
                  passengers: 2
      responses:
        200:
          description: Flights found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      flights:
                        type: array
                        items:
                          $ref: '#/components/schemas/Flight'
                      search_criteria:
                        type: object
                        properties:
                          from:
                            type: string
                          to:
                            type: string
                          date:
                            type: string
                          passengers:
                            type: integer
                      total_count:
                        type: integer
                        example: 1
                      search_timestamp:
                        type: string
                        format: date-time
        422:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /flights/book:
    post:
      tags:
        - Flights
      summary: Book a flight
      description: |
        Book a flight for one or more passengers.

        **Persistence**: Bookings are automatically saved to the database with:
        - Flight details (deduplicated by flight ID and date)
        - Calculated CO2 emissions based on distance, travel class, and passengers
        - User association for booking history

        **Emissions Calculation**: Uses the Haversine formula to calculate distance between airports and applies class-based multipliers (Economy ×1.0, Business ×1.5, etc.).
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - flight_id
                - passengers
                - passenger_details
                - contact_email
              properties:
                flight_id:
                  type: string
                  description: Flight ID
                  example: FL001
                passengers:
                  type: integer
                  description: Number of passengers
                  example: 2
                passenger_details:
                  type: array
                  items:
                    $ref: '#/components/schemas/Passenger'
                contact_email:
                  type: string
                  format: email
                  example: john.doe@example.com
                contact_phone:
                  type: string
                  example: '+1234567890'
            examples:
              valid_booking:
                summary: Valid booking
                value:
                  flight_id: FL001
                  passengers: 2
                  passenger_details:
                    - first_name: John
                      last_name: Doe
                      date_of_birth: 1990-01-01
                      passport_number: AB123456
                    - first_name: Jane
                      last_name: Doe
                      date_of_birth: 1992-05-15
                      passport_number: CD789012
                  contact_email: john.doe@example.com
                  contact_phone: '+1234567890'
      responses:
        201:
          description: Flight booked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Flight booked successfully
                  data:
                    $ref: '#/components/schemas/Booking'
        422:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /flights/{flightId}:
    get:
      tags:
        - Flights
      summary: Get flight details
      description: Retrieve details for a specific flight by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: flightId
          in: path
          required: true
          description: Flight ID
          schema:
            type: string
            example: FL001
      responses:
        200:
          description: Flight details retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Flight'
        404:
          description: Flight not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Flight not found

  /flights/airports:
    get:
      tags:
        - Flights
      summary: List available airports
      description: Retrieve a list of available airports.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Airports retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Airport'
                  count:
                    type: integer
                    example: 6

  /emissions/calculate:
    post:
      tags:
        - Emissions
      summary: Calculate flight emissions
      description: Calculate CO2 emissions for a flight between two airports using IATA codes, travel class, and number of passengers.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - from
                - to
                - class
                - passengers
              properties:
                from:
                  type: string
                  description: Origin airport IATA code (e.g. LHR)
                  example: LHR
                to:
                  type: string
                  description: Destination airport IATA code (e.g. JFK)
                  example: JFK
                class:
                  type: string
                  description: Travel class (economy, premium_economy, business, first)
                  example: economy
                passengers:
                  type: integer
                  description: Number of passengers
                  example: 2
      responses:
        200:
          description: Emissions calculated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmissionCalculationResponse'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        422:
          description: Validation error or unknown IATA code
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unknown IATA code(s)."
                  from:
                    type: string
                    example: LHR
                  to:
                    type: string
                    example: JFK

  /bookings:
    get:
      tags:
        - Bookings
      summary: Get user bookings
      description: Retrieve all bookings for the authenticated user
      security:
        - bearerAuth: []
      responses:
        200:
          description: User bookings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserBooking'
                  count:
                    type: integer
                    example: 2
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

  /bookings/{bookingId}:
    get:
      tags:
        - Bookings
      summary: Get specific booking
      description: Retrieve details of a specific booking for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
          description: Booking identifier
          example: "1"
      responses:
        200:
          description: Booking details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserBooking'
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Booking not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Booking not found"

    delete:
      tags:
        - Bookings
      summary: Cancel booking
      description: Cancel a booking (soft delete) for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
          description: Booking identifier
          example: "1"
      responses:
        200:
          description: Booking cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Booking cancelled successfully"
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Booking not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Booking not found"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login or register endpoint

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique user identifier
          example: 1
        name:
          type: string
          description: User's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        email_verified_at:
          type: string
          format: date-time
          nullable: true
          description: Email verification timestamp
          example: "2024-01-15T10:30:00.000000Z"
        created_at:
          type: string
          format: date-time
          description: User creation timestamp
          example: "2024-01-15T10:30:00.000000Z"
        updated_at:
          type: string
          format: date-time
          description: User last update timestamp
          example: "2024-01-15T10:30:00.000000Z"
      required:
        - id
        - name
        - email
        - created_at
        - updated_at

    Authorization:
      type: object
      properties:
        token:
          type: string
          description: JWT token for authentication
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        type:
          type: string
          description: Token type
          example: "bearer"
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 3600
      required:
        - token
        - type
        - expires_in

    ValidationError:
      type: object
      properties:
        status:
          type: string
          example: "error"
        message:
          type: string
          example: "Validation failed"
        errors:
          type: object
          description: Field-specific validation errors
          example:
            email:
              - "The email field is required."
            password:
              - "The password must be at least 8 characters."
            password_confirmation:
              - "The password confirmation does not match."
      required:
        - status
        - message
        - errors

    UnauthorizedError:
      type: object
      properties:
        message:
          type: string
          example: "Unauthenticated."
      required:
        - message

    ForbiddenError:
      type: object
      properties:
        message:
          type: string
          example: "This action is unauthorized."
      required:
        - message

    NotFoundError:
      type: object
      properties:
        message:
          type: string
          example: "User not found."
      required:
        - message

    Flight:
      type: object
      properties:
        id:
          type: string
          example: FL001
        airline:
          type: string
          example: Green Airlines
        flight_number:
          type: string
          example: GA101
        from:
          type: string
          example: JFK
        to:
          type: string
          example: LAX
        departure_time:
          type: string
          example: '10:00'
        arrival_time:
          type: string
          example: '13:30'
        duration:
          type: string
          example: '5h 30m'
        price:
          type: number
          format: float
          example: 299.99
        seats_available:
          type: integer
          example: 45
        aircraft:
          type: string
          example: Boeing 737
        carbon_footprint:
          type: number
          format: float
          example: 0.85
        eco_rating:
          type: number
          format: float
          example: 4.2
      required:
        - id
        - airline
        - flight_number
        - from
        - to
        - departure_time
        - arrival_time
        - duration
        - price
        - seats_available
        - aircraft
        - carbon_footprint
        - eco_rating

    Airport:
      type: object
      properties:
        code:
          type: string
          example: JFK
        name:
          type: string
          example: John F. Kennedy International Airport
        city:
          type: string
          example: New York
        country:
          type: string
          example: USA
        latitude:
          type: number
          format: float
          example: 40.6413
        longitude:
          type: number
          format: float
          example: -73.7781
      required:
        - code
        - name
        - city
        - country
        - latitude
        - longitude

    Passenger:
      type: object
      properties:
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        date_of_birth:
          type: string
          format: date
          example: 1990-01-01
        passport_number:
          type: string
          example: AB123456
      required:
        - first_name
        - last_name
        - date_of_birth
        - passport_number

    Booking:
      type: object
      properties:
        booking_reference:
          type: string
          example: GTABC1234
        flight_id:
          type: string
          example: FL001
        flight_details:
          $ref: '#/components/schemas/Flight'
        passengers:
          type: integer
          example: 2
        total_price:
          type: number
          format: float
          example: 599.98
        passenger_details:
          type: array
          items:
            $ref: '#/components/schemas/Passenger'
        contact_email:
          type: string
          format: email
          example: john.doe@example.com
        contact_phone:
          type: string
          example: '+1234567890'
        booking_date:
          type: string
          format: date-time
          example: '2024-12-01T10:00:00Z'
        status:
          type: string
          example: confirmed
        carbon_offset_contribution:
          type: number
          format: float
          example: 0.13
      required:
        - booking_reference
        - flight_id
        - flight_details
        - passengers
        - total_price
        - passenger_details
        - contact_email
        - booking_date
        - status
        - carbon_offset_contribution

    UserBooking:
      type: object
      properties:
        id:
          type: integer
          description: Booking identifier
          example: 1
        booking_reference:
          type: string
          description: Unique booking reference
          example: GTABC1234
        flight_details:
          $ref: '#/components/schemas/Flight'
        emissions:
          type: number
          format: float
          description: CO2 emissions in kg
          example: 1497.12
        status:
          type: string
          description: Booking status
          example: confirmed
        created_at:
          type: string
          format: date-time
          description: Booking creation timestamp
          example: "2024-01-15T10:30:00.000000Z"
        updated_at:
          type: string
          format: date-time
          description: Booking last update timestamp
          example: "2024-01-15T10:30:00.000000Z"
      required:
        - id
        - booking_reference
        - flight_details
        - emissions
        - status
        - created_at
        - updated_at

    EmissionCalculationResponse:
      type: object
      properties:
        from:
          type: string
          example: LHR
        to:
          type: string
          example: JFK
        class:
          type: string
          example: economy
        passengers:
          type: integer
          example: 2
        distance_km:
          type: number
          format: float
          example: 5540.06
        emissions_kg:
          type: number
          format: float
          example: 1497.12
      required:
        - from
        - to
        - class
        - passengers
        - distance_km
        - emissions_kg

  examples:
    UserExample:
      summary: Example user object
      value:
        id: 1
        name: "John Doe"
        email: "john.doe@example.com"
        created_at: "2024-01-15T10:30:00.000000Z"
        updated_at: "2024-01-15T10:30:00.000000Z"

    AuthorizationExample:
      summary: Example authorization object
      value:
        token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvYXBpL2F1dGgvbG9naW4iLCJpYXQiOjE3MDUzMjQwMDAsImV4cCI6MTcwNTMyNzYwMCwibmJmIjoxNzA1MzI0MDAwLCJqdGkiOiJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eiIsInN1YiI6MSwidXNlciI6eyJpZCI6MSwibmFtZSI6IkpvaG4gRG9lIiwiZW1haWwiOiJqb2huLmRvZUBleGFtcGxlLmNvbSIsImNyZWF0ZWRfYXQiOiIyMDI0LTAxLTE1VDEwOjMwOjAwLjAwMDAwMFoiLCJ1cGRhdGVkX2F0IjoiMjAyNC0wMS0xNVQxMDozMDowMC4wMDAwMDBaIn19.signature"
        type: "bearer"
        expires_in: 3600

    ValidationErrorExample:
      summary: Example validation error
      value:
        status: "error"
        message: "Validation failed"
        errors:
          email:
            - "The email field is required."
          password:
            - "The password must be at least 8 characters."
          password_confirmation:
            - "The password confirmation does not match."